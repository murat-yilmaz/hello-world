# Use the latest 2.1 version of CircleCI pipeline process engine. 
# See: https://circleci.com/docs/2.0/configuration-reference
version: 2.1

jobs:
  # Below is the definition of your job to build and test your app, you can rename and customize it as you want.
  build-and-test:  
    # These next lines define a Docker executor: https://circleci.com/docs/2.0/executor-types/
    # You can specify an image from Dockerhub or use one of our Convenience Images from CircleCI's Developer Hub.
    # Be sure to update the tag on this image to a more stable version, using latest can result in unstable builds.
    docker:
      - image:  mcr.microsoft.com/dotnet/core/sdk:3.1-focal
    steps:
      # Checkout the code as the first step.
      - checkout
      # Then simply use the dotnet container as you'd expect and run your tests
      - run:
          # Update this line with the directory that contains your tests project file
          solution_path: ConsoleApp1/ConsoleApp1.csproj
          name: Run tests
          command: |
            dotnet test            
      - run: echo "hello worl"
      - run: echo ${CIRCLE_BRANCH}
      - when:
          condition:
             equal: [ main, << pipeline.git.branch >> ]
          steps:
            - run: echo "Maine geldik"
      - run: echo << pipeline.git.branch >>  | cut -d 'n' -f 1            
      #- when:
          #condition:
           #  equal: [ bra , (<< pipeline.git.branch >>  | cut -d 'n' -f 1)]
      #    steps:
      - run: 
        VARI =  << pipeline.git.branch >>  | cut -d 'n' -f 1
        echo "Now run the feature"
        echo "$VARI"
workflows:
  # Below is the definition of your workflow.
  # Inside the workflow, you provide the jobs you want to run, e.g this workflow runs the build-and-test job above.
  # CircleCI will run this workflow on every commit.
  # For more details on extending your workflow, see the configuration docs: https://circleci.com/docs/2.0/configuration-reference/#workflows
  sample: 
    jobs:
      - build-and-test      
